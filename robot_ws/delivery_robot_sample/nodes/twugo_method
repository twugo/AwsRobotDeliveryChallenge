#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

# Copy right 2020 Takuya TWUGO all right reseved

#
# This node enable you to control robot moving velocity from cloud using AWS IoT.
#
# このノードは とぅーぐーメソッドでできています
#

import rospy
import json
from geometry_msgs.msg import Twist
from std_msgs.msg import String
from nav_msgs.msg import Odometry
import time
import tf
from geometry_msgs.msg import Vector3
import math

LINERAR_MAX_SPEED = 0.22
ANGULER_MAX_SPEED = 2.84


class TwugoMethod():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
        self._odom_sub = rospy.Subscriber(
            "/odom", Odometry, self.odom_cb, queue_size=1)
        self._twugo_method_sub = rospy.Subscriber(
            "/twugo_method", String, self.set_goal, queue_size=1)
        self._twist = Twist()
        self._next_synctime = time.time()
        self._is_stoped = False
        self._is_started = False
        self._turn_p = 0.95
        self._x_goal = 0
        self._y_goal = 0

    def main(self):
        while not rospy.is_shutdown():
            d = self._next_synctime - time.time()
            if d <= 0:
                continue
            time.sleep(d)

    def set_goal(self, data):
        self._is_started = True
        payload = json.loads(data.data)
        if  payload["is_goal"]:
            self._is_started = False
            return
        self._x_goal = payload["x"]
        self._y_goal = payload["y"]

    def odom_cb(self, data):
        self._next_synctime = time.time() + 0.3
        if not self._is_started and not self._is_stoped:
            self._twist.linear.x = 0
            self._twist.angular.z = 0
            self._cmd_pub.publish(self._twist)
            self._is_stoped = True
        if not self._is_started:
            return
        r_x, r_y = data.pose.pose.position.x, data.pose.pose.position.y
        r_ang_qua = tf.transformations.euler_from_quaternion([
            data.pose.pose.orientation.x, data.pose.pose.orientation.y,
            data.pose.pose.orientation.z, data.pose.pose.orientation.w])
        r_ang = r_ang_qua[2]
        atan2_tmp = math.atan2(self._y_goal - r_y, self._x_goal - r_x)
        ang_diff = math.atan2(math.sin(atan2_tmp - r_ang),
                              math.cos(atan2_tmp - r_ang))
        turn_speed = ang_diff * self._turn_p
        linear_speed = LINERAR_MAX_SPEED

        self._twist.linear.x = min([LINERAR_MAX_SPEED, linear_speed])
        self._twist.angular.z = self.sign(
            turn_speed) * min([ANGULER_MAX_SPEED, abs(turn_speed)])
        self._cmd_pub.publish(self._twist)
        self._is_stoped = False

    @staticmethod
    def sign(x):
        return (x > 0) - (x < 0)


def main():
    rospy.init_node('twugo_method')
    remote_controller = TwugoMethod()
    remote_controller.main()


if __name__ == '__main__':
    main()
