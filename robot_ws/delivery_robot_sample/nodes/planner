#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# このノードは navigation スタックへの操作を経路ファイルから行います
#

import time
import rospy
import json
from std_msgs.msg import String
from nav_msgs.msg import Odometry, OccupancyGrid
from rosgraph_msgs.msg import Log
import itertools
import cv2
import numpy as np
import time

def main():
    rospy.init_node('planner')
    planner = Planner()
    planner.main()

class Planner():
    def __init__(self):
        self.__path_pub = rospy.Publisher(
            "/path", String, queue_size=1)
        self.__commander_sub = rospy.Subscriber(
            "/commander/meta_info", String, self.__commander_cb, queue_size=1)
        self.__map_sub = rospy.Subscriber(
            "/map", OccupancyGrid, self.__map_cb, queue_size=1)
        self.__shortest_path_dict = {}
        self.__vertex_dict = {} # self.__vertex_dict: vertexのidをキーにvertexを持っている
        self.__vertex_list_param = rospy.get_param("/vertex_list")
        self.__init_graph()  # __vertex_list_param から Vertex と Edge を作成
        self.__initial_map_data = None
        self.__combined_map_data = None
        self.__map_resolution = None

    def main(self):
        rate = rospy.Rate(1)  # 1Hz
        while True:
            if not type(self.__combined_map_data) == type(None):
                img = np.array(map(lambda x: 255 if x else 0, self.__combined_map_data), dtype='uint8').reshape(self.map_height, self.map_width)
                cv2.drawMarker(img, (int(self.map_width/2), int(self.map_height/2)), (200), markerType=cv2.MARKER_CROSS, markerSize=50, thickness=1, line_type=cv2.LINE_8)
                # rospy.loginfo("[Map CB] img.shape: %s" % str(img.shape))
                cv2.imshow('image', img)
                cv2.waitKey(1)
            rate.sleep()

    def __commander_cb(self, data):
        payload = json.loads(data.data)
        if "is_started" in payload and payload["is_started"]:
            full_path = self.__calc_all_patterns(start_vertex_id=0)
            self.__send_path(full_path)
            return

    def __map_cb(self, data):
        rospy.loginfo("[Map CB]")
        # rospy.loginfo("[Map CB] MetaData: %s" % str(data.header))
        # rospy.loginfo("[Map CB] MetaData: %s" % str(data.info))
        # rospy.loginfo("[Map CB] data: %s" % str(data.data))
        # rospy.loginfo("[Map CB] height: %d, width: %d" % (data.info.height, data.info.width))
        self.map_height = data.info.height
        self.map_width = data.info.width
        self.__map_resolution = data.info.resolution
        self.__map_origin = data.info.origin.position
        if type(self.__initial_map_data) == type(None):
            self.__initial_map_data = np.full(self.map_height*self.map_width, False)
            self.__combined_map_data = self.__initial_map_data.copy()
        # img_data = np.array(data.data, dtype='uint8').reshape(self.map_height, self.map_width)
        map_data = np.array(map(lambda x: False if x == -1 else True if x == 100 else False, data.data))
        self.__combined_map_data = np.logical_or(self.__combined_map_data, map_data)
        # rospy.loginfo("[Map CB] __combined_map_data: %s" % str(self.__combined_map_data.tolist()))
        rospy.loginfo("[Map CB] __map_resolution: %s[Meter/Pixel]" % str(self.__map_resolution))
        rospy.loginfo("[Map CB] __map_origin: %s" % str(self.__map_origin))
        # rospy.loginfo("Before Destinations: %s" % [key for key in self.__vertex_dict if self.__vertex_dict[key].get_is_destination()])
        
    def __send_path(self, full_path):
        position_full_path = []
        # vertex_id から 座標を取得しListに格納する
        for v in full_path:
            x, y = v.get_position()
            position_full_path.append(dict(
                x = x,
                y = y,
                tolerance = 0.15,
                is_destination = v.get_is_destination(),
                vertex_id=v.get_vertex_id()
            ))

        # 作成した座標データをCommander Node に送信する
        self.__path_pub.publish(json.dumps(position_full_path))

    def __init_graph(self):
        # Vertex を生成
        self.__vertex_dict = {}
        for v in self.__vertex_list_param:
            if v["id"] in self.__vertex_dict:
                rospy.logwarn("[Class: %s]: vertex id:%d is already exists" % (self.__class__.__name__, v["id"]))
            vertex = Vertex(v["id"], v["x"], v["y"], v["is_destination"])
            self.__vertex_dict[v["id"]] = vertex
        # Vertex を Edge で繋ぐ
        FLAG_STR = "%d-%d"
        linked_vertex_flag = dict()
        edge_counter = 0
        for v in self.__vertex_list_param:
            for lv in v["linked_vertex_list"]:
                key = FLAG_STR % (v["id"], lv)
                if key in linked_vertex_flag:
                    continue
                Edge(self.__vertex_dict[v["id"]], self.__vertex_dict[lv])
                linked_vertex_flag[key] = True
                key = FLAG_STR % (lv, v["id"])
                linked_vertex_flag[key] = True
                edge_counter += 1

    def __calc_all_patterns(self, start_vertex_id=0):
        destination_id_list = []
        start_vertex = self.__vertex_dict[start_vertex_id]
        start_vertex.set_is_via_point_true()
        self.__via_point_num = len([x for x in self.__vertex_dict.values() if x.get_is_via_point()])
        # 目的地となるvertex_idを取得する
        for vertex in self.__vertex_dict.values():
            if vertex.get_is_via_point():
                self.__dijkstra_planner(vertex)
                vertex_id = vertex.get_vertex_id()
                if vertex_id != start_vertex_id:
                    destination_id_list.append(vertex_id)
                # else:
                #     start_vertex = vertex
        # すべての巡回経路を算出
        all_patterns = map(list, itertools.permutations(destination_id_list))
        mini_cost = float("inf")
        mini_cost_path = None
        # 最小となる巡回経路を算出する
        for path in all_patterns:
            p = start_vertex_id
            tmp_cost = 0
            for c in path:
                key = "%d-%d" % (p, c)
                p = c
                tmp_cost += self.__shortest_path_dict[key]["cost"]
            if mini_cost > tmp_cost:
                mini_cost = tmp_cost
                mini_cost_path = path

        p = start_vertex_id
        full_path = [start_vertex]
        for c in mini_cost_path:
            key = "%d-%d" % (p, c)
            p = c
            half_path = self.__shortest_path_dict[key]["path"]
            if half_path[0].get_vertex_id() == c:
                half_path.reverse()
            full_path.extend(half_path[1:])
        rospy.loginfo("Destination path: %s" % mini_cost_path)
        rospy.loginfo("Full path: %s" % map(lambda x: x.get_vertex_id(), full_path))
        return full_path

    def __dijkstra_planner(self, start_vertex):

        # vertexごとのSTARTからの最小コスト
        min_dist_dict = {}
        min_dist_dict[start_vertex] = 0
        # vertexに最小コストで辿り着く場合の直前のノード
        prev_vertex_dict = {}
        prev_vertex_dict[start_vertex] = Vertex(None, None, None)
        queue = []
        # START vertex をキューにプッシュ
        queue.append(start_vertex)
        arrived_via_points = []
        arrived_via_points.append(start_vertex)

        while True:
            # 確定した vertex から遷移可能な vertex のうち
            # 最小コストと遷移先ノードを min_dist_dict と prev_node_dict に設定
            queue.sort(key=lambda v: min_dist_dict[v])
            
            # FIXME: ROSを再起動しないままブラウザのSTARTボタンを複数回押すと、index out of range になる
            vertex = queue.pop(0)

            # GOAL
            if vertex.get_is_via_point():
                # goalノードには複数回行くことがあるのでリストとか作ってlength使う?
                if not vertex in arrived_via_points:
                    path = []
                    tmp_vertex = vertex
                    while True:
                        path.append(tmp_vertex)
                        if tmp_vertex.get_vertex_id() == start_vertex.get_vertex_id():
                            break
                        tmp_vertex = prev_vertex_dict[tmp_vertex]
                    result = {
                        "cost": min_dist_dict[vertex],
                        "path": path
                    }
                    key = "%d-%d" % (path[0].get_vertex_id(), path[-1].get_vertex_id())
                    self.__shortest_path_dict[key] = result
                    key = "%d-%d" % (path[-1].get_vertex_id(), path[0].get_vertex_id())
                    self.__shortest_path_dict[key] = result
                    arrived_via_points.append(vertex)
                    if(len(arrived_via_points) >= self.__via_point_num):
                        return

            prev_vertex = vertex
            # 確定したノードから遷移可能な vertex について
            # コストを計算し、キューに追加する
        
            # 直前に確定した vertex から遷移可能な edge について繰り返し
            for arrival_edge in prev_vertex.get_edge_list():
                # 遷移可能なvertexについて、直前に確定したvertexから遷移した場合のコストを計算
                tmp_d = min_dist_dict[prev_vertex] + arrival_edge.get_cost()
                arrival_vertex = arrival_edge.get_opposite_vertex(prev_vertex)
                # 過去に遷移先ノードの最小コストを計算済みかどうか
                if arrival_vertex in min_dist_dict.keys():
                    # 過去に計算していたSTARTからの最小コストより直前に確定したノードから遷移した場合の
			        # コストが小さかった場合，最小コストを更新
                    if tmp_d < min_dist_dict[arrival_vertex]:
                        min_dist_dict[arrival_vertex] = tmp_d
                        queue.append(arrival_vertex)
                        prev_vertex_dict[arrival_vertex] = prev_vertex
                else:
                    min_dist_dict[arrival_vertex] = tmp_d
                    queue.append(arrival_vertex)
                    prev_vertex_dict[arrival_vertex] = prev_vertex

    def __generate_new_vertex(self, x, y):
        """新しいvertexを生成し、__vertex_dictに追加する

        Arguments:
            x {float} -- 生成したいvertexのx座標
            y {float} -- 生成したいvertexのy座標

        Returns:
            [Vertex] -- 生成したvertex
        """
        vertex_id = max(self.__vertex_dict.keys()) + 1
        self.__vertex_dict[vertex_id] = Vertex(vertex_id, x, y)
        return self.__vertex_dict[vertex_id]

    def __insert_vertex(self, vertex1, vertex2, new_vertex):
        """同一のEdgeで直接接続されたVertex間に新たなVertexを追加する

        Arguments:
            vertex1 {Vertex} -- Vertex2と同一のEdgeで接続されている
            vertex2 {Vertex} -- Vertex1と同一のEdgeで接続されている
            new_vertex {Vertex} -- Vertex1とVertex2間に追加するVertex
        """
        edge_list1 = vertex1.get_edge_list()
        link_edge = None

        # vertex1とvertex2が直接接続されているかどうかを確認する
        for edge in edge_list1:
            vertex = edge.get_opposite_vertex(vertex1)
            if vertex == vertex2:
                link_edge = edge
                break
        if link_edge == None:
            rospy.logerr("Vertex%d and Vertex%d is not directly linked." % (vertex1.get_vertex_id(), vertex2.get_vertex_id()))
            return

        vertex1.remove_edge(link_edge)
        vertex2.remove_edge(link_edge)
        Edge(vertex1, new_vertex)
        Edge(vertex2, new_vertex)


class Vertex:
    def __init__(self, vertex_id, x, y, is_destination=False):
        self.__edge_list = []
        self.__x = x
        self.__y = y
        self.__is_destination = is_destination
        self.__is_via_point = is_destination  # スタート地点を除いて、基本的にis_destinationとis_destinationは同じ
        self.__vertex_id = vertex_id
    
    def set_edge(self, edge):
        if edge in self.__edge_list:
            return
        self.__edge_list.append(edge)

    def remove_edge(self, edge):
        if not edge in self.__edge_list:
            return
        self.__edge_list.remove(edge)

    def get_position(self):
        return self.__x, self.__y

    def get_is_destination(self):
        return self.__is_destination

    def get_is_via_point(self):
        return self.__is_via_point
    
    def get_edge_list(self):
        return self.__edge_list
    
    def get_vertex_id(self):
        return self.__vertex_id

    def set_is_destination_false(self):
        self.__is_destination = False
    
    def set_is_via_point_true(self):
        self.__is_via_point = True

    def set_is_via_point_false(self):
        self.__is_via_point = False

class Edge:
    def __init__(self, vertex_a, vertex_b):
        self.__vertex_list = [vertex_a, vertex_b]
        self.__cost = self.__calc_cost()
        vertex_a.set_edge(self)
        vertex_b.set_edge(self)

    def get_opposite_vertex(self, my_vertex):
        if not my_vertex in self.__vertex_list:
            return None
        for v in self.__vertex_list:
            if v is my_vertex:
                continue
            return v

    def __calc_cost(self):
        ax, ay = self.__vertex_list[0].get_position()
        bx, by = self.__vertex_list[1].get_position()
        return ((ax - bx)**2 + (ay - by)**2)**0.5

    def get_cost(self):
        return self.__cost


if __name__ == '__main__':
    main()