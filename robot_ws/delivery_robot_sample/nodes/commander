#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# このノードは navigation スタックへの操作を経路ファイルから行います
#

import json
import time

import rospy
from std_msgs.msg import String
from nav_msgs.msg import Odometry
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point


class Commander():
    def __init__(self):
        # ROS Subscriber
        self._odom_sub = rospy.Subscriber(
            "/odom", Odometry, self.odom_cb, queue_size=1)
        self._path_sub = rospy.Subscriber(
            "/planner/path", String, self.path_cb, queue_size=1)
        self._obstacle_detect_sub = rospy.Subscriber(
            "/obstacle_detector/msg", String, self.obstacle_detect_cb, queue_size=1)
        self._remote_console_sub = rospy.Subscriber(
            '/remote_console/to_commander', String, self.__remote_console_cb, queue_size=1)

        # ROS Publisher
        self._twugo_method_pub = rospy.Publisher(
            "/twugo_method", String, queue_size=1)
        self._planner_pub = rospy.Publisher(
            "/commander/meta_info", String, queue_size=1)
        self._twugo_method_restart_pub = rospy.Publisher(
            "/twugo_method/restart", String, queue_size=1)
        self._remoteconsole_update_status_pub = rospy.Publisher(
            "/remote_console/update_status", String, queue_size=1)
        self._obstacle_detector_pub = rospy.Publisher(
            "/obstacle_detector/detect_request", String, queue_size=1)

        # Member variable
        self._current_step = None
        self._step = []
        self._is_started = False
        self._is_sended = False
        self._is_goal = False

        # gameMode関連
        self.__game_mode_list = {
            "main": "GAME_MODE_IS_MAIN",  # 本戦モード
            "final": "GAME_MODE_IS_FINAL"  # 決勝戦モード
        }
        self.__current_game_mode = None

    def main(self):
        rospy.spin()

    def __remote_console_cb(self, data):
        payload = json.loads(data.data)
        if "action" not in payload:
            return
        if "gameMode" in payload:
            self.__current_game_mode = payload["gameMode"]
        if payload["action"] == "start":
            rospy.loginfo("detect start!!")
            # 決勝モード
            if self.__current_game_mode == self.__game_mode_list["final"]:
                self._is_started = True
                self._is_sended = False
                self._is_goal = False
                self._current_step = 0    
                self._twugo_method_restart_pub.publish(json.dumps({"data": "is_start", "gameMode": self.__current_game_mode}))
                self._remoteconsole_update_status_pub.publish(json.dumps({"status": "running"}))
                return
            
            planner_payload = {}
            planner_payload["is_started"] = True
            self._planner_pub.publish(json.dumps(planner_payload))
            for i in range(1, 31):
                if len(self._step) > 0:
                    break
                time.sleep(1)
                rospy.loginfo("[Commander::__remote_console_cb] 経路計算の結果を待機しています... [%d s]" % i)
            if len(self._step) == 0:
                rospy.logerr("[Commander::__remote_console_cb] 経路計算に失敗しました")
                return
                
            self._is_started = True
            self._is_sended = False
            self._is_goal = False
            self._current_step = 0    
            self._twugo_method_restart_pub.publish(json.dumps({"data": "is_start", "gameMode": self.__current_game_mode}))
            self._remoteconsole_update_status_pub.publish(json.dumps({"status": "running"}))

        if payload["action"] == "restart" and self._is_started:
            rospy.loginfo("detect restart!!")
            self._twugo_method_restart_pub.publish(json.dumps({"data": "is_restart"}))
            self._remoteconsole_update_status_pub.publish(json.dumps({"status": "running"}))
        
        if payload["action"] == "retryGame" and (self._is_goal or self._is_started):
            self._current_step = None
            self._step = []
            self._is_started = False
            self._is_sended = False
            self._is_goal = False
            self._twugo_method_restart_pub.publish(json.dumps({"data": "is_retry"}))
            self._remoteconsole_update_status_pub.publish(json.dumps({"status": "ready"}))
                
    def path_cb(self, data):
        payload = json.loads(data.data)
        self._step = payload
        self._current_step = 0

    def odom_cb(self, data):
        try:
            if self.__current_game_mode == self.__game_mode_list["main"]:
                payload = {}
                if self._current_step == None:
                    return
                if self._is_goal:
                    return
                if not self._is_started:
                    return
                if not self._is_sended:
                    payload["id"] = self._step[self._current_step]["vertex_id"]
                    payload["x"] = self._step[self._current_step]["x"]
                    payload["y"] = self._step[self._current_step]["y"]
                    payload["pre_id"] = self._step[self._current_step-1]["vertex_id"]
                    payload["pre_x"] = self._step[self._current_step-1]["x"]
                    payload["pre_y"] = self._step[self._current_step-1]["y"]
                    payload["is_goal"] = self._is_goal
                    payload["is_destination"] = self._step[self._current_step]["is_destination"]
                    self._twugo_method_pub.publish(json.dumps(payload))
                    self._is_sended = True
                s_x, s_y = self._step[self._current_step]["x"], self._step[self._current_step]["y"]
                r_x, r_y = data.pose.pose.position.x, data.pose.pose.position.y
                error = ((r_x - s_x)**2 + (r_y - s_y)**2)
                
                if error < (self._step[self._current_step]["tolerance"]**2)*2:
                    planner_payload = dict(
                        is_destination=self._step[self._current_step]["is_destination"],
                        vertex_id=self._step[self._current_step]["vertex_id"]
                    )
                    self._planner_pub.publish(json.dumps(planner_payload))

                    if self._step[self._current_step]["is_destination"]:
                        self._remoteconsole_update_status_pub.publish(json.dumps({"status": "delivery"}))
                        rospy.loginfo("HELLO!!! This is Amazon!!!!")
                    
                    self._current_step += 1
                    self._obstacle_detector_pub.publish(json.dumps({"obstacle_detect_request": True}))
                    self._is_sended = False
                    rospy.loginfo("Current step: %d" % self._current_step)
                    if len(self._step) <= self._current_step:
                        self._is_goal = True
                        payload["is_goal"] = self._is_goal
                        self._twugo_method_pub.publish(json.dumps(payload))
                        self._remoteconsole_update_status_pub.publish(json.dumps({"status": "goal"}))
                        rospy.loginfo("Is Goal!!!!!!!!")
            
            elif self.__current_game_mode == self.__game_mode_list["final"]:
                rospy.loginfo_once("Final mode.")
                payload = {}
                if self._is_goal:
                    return
                if not self._is_started:
                    return
                if not self._is_sended:
                    payload["x"] = rospy.get_param("/step")[self._current_step]["x"]
                    payload["y"] = rospy.get_param("/step")[self._current_step]["y"]
                    payload["is_goal"] = self._is_goal
                    self._twugo_method_pub.publish(json.dumps(payload))
                    self._is_sended = True
                s_x, s_y = rospy.get_param("/step")[self._current_step]["x"], rospy.get_param("/step")[self._current_step]["y"]
                r_x, r_y = data.pose.pose.position.x, data.pose.pose.position.y
                error = ((r_x - s_x)**2 + (r_y - s_y)**2)
                
                if error < rospy.get_param("/step")[self._current_step]["tolerance"]**2:
                    self._current_step += 1
                    self._is_sended = False
                    rospy.loginfo("Current step: %d" % self._current_step)
                    if len(rospy.get_param("/step")) <= self._current_step:
                        self._is_goal = True
                        payload["is_goal"] = self._is_goal
                        self._twugo_method_pub.publish(json.dumps(payload))
                        self._remoteconsole_update_status_pub.publish(json.dumps({"status": "goal"}))
                        rospy.loginfo("Is Goal!!!!!!!!")

        except Exception as e:
            rospy.logwarn("command publisher request failed")
            rospy.logwarn(e)


    def obstacle_detect_cb(self, data):
        payload = json.loads(data.data)
        if "vertex_id" in payload:
            planner_payload = dict(
                    remove_edge_request=True,
                    pre_vertex_id=self._step[self._current_step - 1]["vertex_id"],
                    vertex_id=payload["vertex_id"],
                )
        else:
            planner_payload = dict(
                    remove_edge_request=True,
                    pre_vertex_id=self._step[self._current_step - 1]["vertex_id"],
                    vertex_id=self._step[self._current_step]["vertex_id"],
                )
        self._planner_pub.publish(json.dumps(planner_payload))

def main():
    rospy.init_node('commander')
    commander = Commander()
    commander.main()


if __name__ == '__main__':
    main()
